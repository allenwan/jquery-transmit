package com.googlecode.jquery.transmit {		import com.googlecode.jquery.transmit.util.StringUtils;		import flash.events.DataEvent;	import flash.events.Event;	import flash.events.HTTPStatusEvent;	import flash.events.IOErrorEvent;	import flash.events.ProgressEvent;	import flash.events.SecurityErrorEvent;	import flash.external.ExternalInterface;	import flash.net.FileFilter;	import flash.net.FileReference;	import flash.net.FileReferenceList;	import flash.net.URLRequest;	import flash.net.URLRequestMethod;	import flash.net.URLVariables;	import flash.text.TextField;	import flash.utils.Dictionary;		/**	 * FileUploader is largely a clone of the YUI flash uploader. We	 * didn't want to reinvent the wheel, but we wanted to be able to 	 * modify the code where necessary. The YUI uploader can be found	 * here: http://developer.yahoo.com/yui/uploader/	 */	public class FileUploader extends JavaScriptAdapter {				private static const SIMULTANEUOUS_UPLOAD_LIMIT:Number = 2;				private var fileDataList:Object;		private var fileIdCounter:Number;		private var fileIdList:Dictionary;		private var fileRefList:Object;		private var filesToUpload:Array;		private var multipleFiles:FileReferenceList;		private var output:TextField;		private var singleFile:FileReference;				public function FileUploader():void {			super();			createChildren();		}				override protected function init():void {			super.init();			ExternalInterface.addCallback("browse", browse);			ExternalInterface.addCallback("removeFile", removeFile);			ExternalInterface.addCallback("clearFileList", clearFileList);			ExternalInterface.addCallback("upload", upload);			ExternalInterface.addCallback("cancel", cancel);			fileDataList = new Object();			fileRefList = new Object();			fileIdList = new Dictionary();			multipleFiles = new FileReferenceList();			fileIdCounter = 0;			filesToUpload = [];		}				private function createChildren():void {			output = new TextField();			output.border = true;			output.width = this.width;			output.height = this.height;			addChild(output);		}				/* ----- API functions ----- */				public function browse(isSingleFile:Boolean = false, allowedFileTypes:Array = null):void {			if (isSingleFile) {				singleFile = new FileReference();				singleFile.addEventListener(Event.SELECT, onSingleFileSelect);				if (allowedFileTypes) {					singleFile.browse(processAllowedFileTypes(allowedFileTypes));				} else {					singleFile.browse();				}			} else {				multipleFiles = new FileReferenceList();				multipleFiles.addEventListener(Event.SELECT, onSelect);				if (allowedFileTypes) {					multipleFiles.browse(processAllowedFileTypes(allowedFileTypes));				} else {					multipleFiles.browse();				}			}		}				public function removeFile(fileId:String):Object {			log("Removing file: " + fileDataList[fileId].name);			delete fileDataList[fileId];			delete fileRefList[fileId];			return fileDataList;		}				public function clearFileList():Boolean {			fileDataList = new Object();			fileRefList = new Object();			fileIdList = new Dictionary();			fileIdCounter = 0;			filesToUpload = [];			return true;		}				public function upload(url:String, method:String = "GET", vars:Object = null):void {			log("Uploading files...");			if (StringUtils.isEmpty(method))				method = "GET";			var request:URLRequest = this.createUrlRequest(url, method, vars);			for each(var file:FileReference in fileRefList) {				queueForUpload(file, request);			}		}				public function cancel(fileId:String = null):void {			log("Cancelling upload...");			if (fileId != null) {				var fr:FileReference = fileRefList[fileId];				fr.cancel();			} else {				for each (var file:FileReference in fileRefList) {					file.cancel();				}			}		}				/* ----- Utility functions ----- */				private function processAllowedFileTypes(allowedFileTypes:Array):Array {			log("Processing allowed file types...");			for (var i:int = 0; i < allowedFileTypes.length; i++) {				log("Allowing types: " + allowedFileTypes[i].extensions);				allowedFileTypes[i] = new FileFilter(allowedFileTypes[i].description, allowedFileTypes[i].extensions, allowedFileTypes[i].macType);			}			return allowedFileTypes;		}				private function processSelection():void {			var txt:String = "Files Selected: ";			for each (var file:Object in fileDataList) {				txt += file.name + "; ";			}			log(txt);						var jsEvent:Object = {				fileList:fileDataList,				type:"fileSelect"			};			super.dispatchEventToJavaScript(jsEvent);		}				private function addPendingFile(file:FileReference):void {			var fileId:String = "file" + fileIdCounter;			log("Adding file: " + file.name + " with id: " + fileId);			fileDataList[fileId] = {				id:fileId,				name:file.name,				created:file.creationDate,				updated:file.modificationDate,				size:file.size			};			file.addEventListener(Event.OPEN, onUploadStart);			file.addEventListener(Event.CANCEL, onCancel);			file.addEventListener(ProgressEvent.PROGRESS, onProgress);			file.addEventListener(Event.COMPLETE, onComplete);			file.addEventListener(DataEvent.UPLOAD_COMPLETE_DATA, onUploadComplete);			file.addEventListener(HTTPStatusEvent.HTTP_STATUS, onFailure);			file.addEventListener(IOErrorEvent.IO_ERROR, onFailure);			file.addEventListener(SecurityErrorEvent.SECURITY_ERROR, onFailure);			fileRefList[fileId] = file;			fileIdList[file] = fileId;			fileIdCounter++;		}						private function queueForUpload(file:FileReference, req:URLRequest):void {			log("Queuing file: " + file.name);			filesToUpload.push({file:file, request:req});			if (filesToUpload.length < SIMULTANEUOUS_UPLOAD_LIMIT) 				processQueue();		}				private function processQueue():void {			log("Processing queue...");			var obj:Object = filesToUpload.pop();			var file:FileReference = obj.file;			var req:URLRequest = obj.request;			log("Uploading file to: " + req.url);			file.upload(req, "Filedata");		}				private function createUrlRequest(url:String, method:String = "GET", vars:Object = null):URLRequest {			log("Creating request url: " + url);			var request:URLRequest = new URLRequest();			request.url = url;			request.method = method;			request.data = new URLVariables();			for (var item:String in vars) {				log("Adding request vars...");				request.data[item] = vars[item];			}			return request;		}				private function log(txt:String):void {			if (txt) {				output.appendText(txt + "\n");				var jsEvent:Object = {					type:"debug",					text:txt				};				super.dispatchEventToJavaScript(jsEvent);			}		}				/* ----- Internal event handlers ----- */				private function onSingleFileSelect(event:Event):void {			addPendingFile(event.target as FileReference);			processSelection();		}				private function onSelect(event:Event):void {			var selectedFiles:FileReferenceList = multipleFiles;			var files:Array = selectedFiles.fileList;			files.sortOn("name", Array.CASEINSENSITIVE);			for (var i:uint = 0; i < files.length; i++) {				addPendingFile(files[i]);			}			processSelection();		}				private function onUploadStart(event:Event):void {			log("Started upload for " + fileIdList[event.target]);			var jsEvent:Object = {				id:fileIdList[event.target],				type:"uploadStart"			};			super.dispatchEventToJavaScript(jsEvent);		}				private function onProgress(event:ProgressEvent):void {			log("Progress for " + fileIdList[event.target] + ": " + event.bytesLoaded + " / " + event.bytesTotal);			var jsEvent:Object = {				id:fileIdList[event.target],				bytesLoaded:event.bytesLoaded,				bytesTotal:event.bytesTotal,				type:"uploadProgress"			};			super.dispatchEventToJavaScript(jsEvent);		}				private function onComplete(event:Event):void {			log("Upload complete for " + fileIdList[event.target]);			var jsEvent:Object = {				id:fileIdList[event.target],				type:"uploadComplete"			};			super.dispatchEventToJavaScript(jsEvent);			// Process the next file in queue.			if(filesToUpload.length > 0) 				processQueue();		}				private function onUploadComplete(event:DataEvent):void {			log("Got data back for " + fileIdList[event.target] + ": " + event.data);			var jsEvent:Object = {				id:fileIdList[event.target],				data:event.data,				type:"uploadCompleteData"			};			super.dispatchEventToJavaScript(jsEvent);		}				private function onCancel(event:Event):void {			log("Canceled upload for " + fileIdList[event.target]);			var jsEvent:Object = {				id:fileIdList[event.target],				type:"uploadCancel"			};			super.dispatchEventToJavaScript(jsEvent);		}				private function onFailure(event:Event):void {			var status:String = "";			if (event is HTTPStatusEvent) {				var httpStatusEvent:HTTPStatusEvent = event as HTTPStatusEvent;				status = httpStatusEvent.status.toString();			} else if (event is IOErrorEvent) {				status = event.toString();			} else if (event is SecurityErrorEvent) {				status = event.toString();			}			log("onFailure: " + status);			var jsEvent:Object = {				id:fileIdList[event.target],				status:status,				type:"uploadError"			};			super.dispatchEventToJavaScript(jsEvent);			// Process the next file in queue.			if(filesToUpload.length > 0) 				processQueue();		}	}}